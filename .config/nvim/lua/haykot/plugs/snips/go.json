{
  "If err != nil": {
    "prefix": "if-err",
    "body": [
      "if err != nil {",
      "  ${1:return err}",
      "}"
    ],
    "description": "Go if statement for error handling"
  },
  "Controller Function": {
    "prefix": "handler-err",
    "body": [
      "func (c *${1:Controller}) ${2} (w http.ResponseWriter, r *http.Request) error {",
      "  ${3}",
      "}"
    ],
    "description": "Go function for controller endpoint with customizable name and body"
  },
  "Require No Error": {
    "prefix": "rne",
    "body": [
      "require.NoError(t, err)"
    ],
    "description": "Testify shorthand for require no error"
  },
  "defer close w/ Error": {
    "prefix": "defer-close-err",
    "body": [
      "defer func() { _ = ${1:close()} }()"
    ],
    "description": "Go close statement for error handling"
  },
  "ctx context.Context": {
    "prefix": "ctx",
    "body": [
      "ctx context.Context"
    ],
    "description": "Go context.Context variable declaration"
  },
  "For Range": {
    "prefix": "for",
    "body": [
      "for _, ${1:v} := range ${2:values} {",
      "  $0",
      "}"
    ]
  },
  "For Loop": {
    "prefix": "fori",
    "body": [
      "for i := range ${1:values} {",
      "  $0",
      "}"
    ]
  },
  "Goroutine anonymous func": {
    "prefix": "gofunc",
    "body": [
      "go func(){",
      "  $0",
      "}()"
    ]
  },
  "Switch": {
    "prefix": "switch",
    "body": [
      "switch ${1:var} {",
      "case ${2:condition}:",
      "  $0",
      "}"
    ]
  },
  "Naked Switch": {
    "prefix": "switch-naked",
    "body": [
      "switch {",
      "case ${1:condition}:",
      "  $0",
      "}"
    ]
  }
}
